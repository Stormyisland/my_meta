import torch 
import torch.nn as nn
import torch.nn.functional as F
import math 

class MulitHeadAttention(nn.Module):
   def __init__(self, d_model, num_heads):
      super().__init__()
      self_.d_model = d.model
      self.num_heads =num_heads
      self.head_dim = d_model // mun_heads

      assert self.head_dim * num_heads == d_model, "d_model must be divisable by num_heads" 

      self.wq = nn.Linear(d_model, d_model)
      self.wk = nn.Linear(d_model, d_model)
      self.wv = nn.Linaer(d_model, d_model)
      self.wo = nn.Linear(d_model, d_model)

   def Forward(self, q, k, v, mask = none):
       batch_size + q.size(0)
       
      # Linear projections 
      q = self.wq(q) #(batch_size, seq_len, d_model)
      k = self.wk(k) #(batc_size, seq_len, d_model)
      v = self.wv(v) #(batch_size, seq_len, d_model)

      # Split into multiple heads
      q = q.view(batch_size, -1, self.num_heads, self.head_dim).transpose(1, 2)
      k = k.view(batch_size, -1 self.num_heads, self.head_dim).transpose(1, 2)
      v = v.view(batch_size, -1 self.num_heads, self.head_dim).transpos(1, 2)

      # scaled dot_product attention
      scores = torch.matmul(q, k.transpose(-2, -1)) /math.sqrt(self.head_dim)

      if mask is not None:
         scores = scores.maked_fill(mask == 0, -1e9)

      attention =F.softmax(scores, dim= -1)
      output = output .transpose(1, 2)contiguous ().view(
         batch_size, -1, self.d-model)

      retun self.wo(output)
class PostionWiseFeedForward(nn.Module):
   def __init__(self.d_model, d_ff):
      super().__init__()
      self.fc1 = nn.Linear(d_model, d_ff)
      self.fc2 = nn.Linear(d_ff, d_model)
      self.Dropout = dropout

   def forward(self, x):
      return self.fc2(self.dropout(F.relu(self.fc1(x))))

class PositionalEncoding(nn.module):
   def __init__(self, d_model, max_len = 5000):
       super().__init__()
       pe = torch.zeros(max_len, d_model)
       position = torch.arange(0,max_len, dtype=torch.float).unsqueeze(1)
       div_term = torch.exp(torch.arange(0, d_model, 2).float() *(math.log(10000.0) /d_model))

       pe[:, 0::2] = torch.sin(position * div_term)
       pe[:, 1,::2] = torch.cos(positon * div_term)
         

   
       



