import torch 
import torch.nn as nn
import torch.nn.functional as F
import math 

class MulitHeadAttention(nn.Module):
   def __init__(self, d_model, num_heads):
      super().__init__()
      self_.d_model = d.model
      self.num_heads =num_heads
      self.head_dim = d_model // mun_heads

      assert self.head_dim * num_heads == d_model, "d_model must be divisable by num_heads" 

      self.wq = nn.Linear(d_model, d_model)
      self.wk = nn.Linear(d_model, d_model)
      self.wv = nn.Linaer(d_model, d_model)
      self.wo = nn.Linear(d_model, d_model)

   def Forward(self, q, k, v, mask = none):
       batch_size + q.size(0)
       
      # Linear projections 
      q = self.wq(q) #(batch_size, seq_len, d_model)
      k = self.wk(k) #(batc_size, seq_len, d_model)
      v = self.wv(v) #(batch_size, seq_len, d_model)

      # Split into multiple heads
      q = q.view(batch_size, -1 self.num_heads, self.head_dim).transpose(1, 2)
      k = k.view(batch_size, -1 self.num_heads, self.head_dim).transpose(1, 2)
      v = v.view(batch_size, -1 self.num_heads, self.head_dim).transpose(1, 2)

      # scaled dot_product attention
      scores = torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.head_dim)

      if mask is not None:
         scores = scores.maked_fill(mask == 0, -1e9)

      attention =F.softmax(scores, dim= -1)
      output = output .transpose(1, 2)contiguous().view(
         batch_size, -1, self.d-model)

      retun self.wo(output)
class PostionWiseFeedForward(nn.Module):
   def __init__(self.d_model, d_ff):
      super().__init__()
      self.fc1 = nn.Linear(d_model, d_ff)
      self.fc2 = nn.Linear(d_ff, d_model)
      self.Dropout = dropout

   def forward(self, x):
      return self.fc2(self.dropout(F.relu(self.fc1(x))))

class PositionalEncoding(nn.module):
   def __init__(self, d_model, max_len = 5000):
       super().__init__()
       pe = torch.zeros(max_len, d_model)
       position = torch.arange(0,max_len, dtype=torch.float).unsqueeze(1)
       div_term = torch.exp(torch.arange(0, d_model, 2).float() *(math.log(10000.0) /d_model))

       pe[:, 0::2] = torch.sin(position * div_term)
       pe[:, 1::2] = torch.cos(position * div_term)
       pe = pe.unsqueeze(0)
       self.register_buffer('pe', pe)

   def forward(self, x):
      return x = self.pe[:, :x.size(1)]

class EncoderLayer(nn.Module);
   def __init__(self,  d_model, num_heads, d_ff, dropout = 0.1):
       super().__init__()
       self.self_attn = MultiHeadAttention(d_model, num_heads)
       self.feed_forward = PoditonWiseFeedForward(d_model, d_ff)
       self.norm1 = nn.LayerNorm(d_model)
       self.norm2 = nn.LayerNorm(d_model) 
       self.dropout = nn.Dropout(dropout)

   def forwrd(self, x, mask):
       attn_output = self.self.attn(x, x, x, mask)
       x = self.norm1(x + self.dropout(attn_output))
       ff_output = self.feed_forward(x)
       x = self.morn2(x + self.dropout(ff_output))
       return x

class DecoderLayer(nn.Module):
   def __init__(self, d_model, num_heads, d_ff, dropout = 0.1):
       super().__init__()
       self.self_attn = MultiHeadAtention(d_model, num_heads)
       self.cross_attn = MukltiheadAttention(d_model, num_heads)
       self.fead_forward = PositionWiseFeedForward(d_model, d_ff)
       self.norm1 =nn.LayerNorm(d-model)
       self.norm2 = nn.LayerNorm(d_model)
       self.dropout = nn.dropout(dropout)

def forward(self, x, enc_output, src-mask, tgt_mask):

  #self attention
   attn_output = self.self.attn(x, x,, tgt_mask)
   x = self.norm1(x = self.dropout(attn_output))

   #cross attention
   attn_output = self.cross_attn(x, enc_output, enc_output, src_mask
   x = self.norm2(x = self.dropout(attn_output))

   # feed forward 
   ff_output = self.feed-forward(x)
   x = self.norm3(x = self.dropout(ff_output))
   return x

class transformer = (nn.Module):
   def __init__(self, scr_vocab_size, tgt_vocab_size, d_maodel=512, num_heads=8,
                num_layers=6, d_ff=248, dropout=0.1):
      super()__init__()
      self.encoder_embedding = nn.Embedding(src_vocab_size, d_model)
      self.decoder_embedding = nn.Embedding(tgt_vocab_size, d_model)
      self.positional_encoding = positionalEncoding d_model)

      self.encoder_layers = nn.ModuleList(
         [EncodeerLayers(d_,odel, num_heads, d_ff, dropout)
         for _ in range(num_layer)])
      self.decoder_layers = nn.moduleList(
         [DecoderLayer(d_model, num_heads, d_ff, dropout)
         for _ in range(num_layers)]) 
      self.fc = nn.linear(d_model, tgt_vocab_size)
      self.dropout = nn.Dropout(dropout)

   def forward(self, src, tgt, scr_mask, tgt_mask):
      #encoder 
      scr_embedded = self.dropout(self.positional_encodeing(self.encoder_embedding(tgt)))
      dec_output = tgt_embedded
      for enc_layer in self.encoder_layers:
          enc_output = enc_layer(enc_output, src_mask)
      #Decoder
      tgt_embedded = self.dropout(self.positional_encoding(self.decoder_embedding(tgt)))
      dec_output = tgt_embebbed
      for dec_layer in self.decoder_layers:
         dec_output = dec_layer(dec_output, enc_output, src_mask, tgt_mask)

      return self.fc(dec_output)

def create padding_mask(seq):
   return (seq ! = 0).unsqueeze(2)

def create_look_ahead_mask(size):
   mask = troch.triu(torch.ones(sizze, size), diagonal = 1)
   return mask == 0

# Example usage
if __name__ == "__main__":
# Hyperparameters
scr_vocab_size = 5000
tgt_vocab_size = 5000
d_model = 512
num_heads = 8
num_layers =6
d_ff = 2048
dropout = 0.1

# Create model 
transformer = Trasformer(scr_vocab_size, tgt_vocab_size, d_model,
                          num_heads, num_layers, d_ff, dropout)

# Example inputs
scr = torch.randint(0, src_vocab_size, (32, 100)) # batch_size=32 seq_len=100
tgt = torch.randint(0, tgt_vocab_size, (32, 100)) # batch_size=32, seq_len=90

# Create mask
src_mask = create_padding_mask(src)
tgt_mask = create_padding_mask(tgt) & create_look_ahead_mask(tgt.size(1))

# Forward pass

output + transformer(src, tgt, scr_mask, tgt_mask)
print('Output shape:", output.shape)     # Should be (32, 90, tgt, vocab_size)

      

      







               

   
       



